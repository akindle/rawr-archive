[
  {
    "Id": "241592",
    "ThreadId": "70885",
    "Html": "<p>The Optimizer portion of Rawr is fantastic, and absolutely core to the purpose of Rawr.&nbsp; With that said - how can we improve it?&nbsp; Hence the thread.</p>\r\n<p>&nbsp;&nbsp;&nbsp; &gt;&gt;&gt;&gt;Before we get started, this is about functionality/features, <strong>NOT</strong> for bug reports/general Optimizer FAQ.&lt;&lt;&lt;&lt;</p>\r\n<p>I'll kick it off with some ideas (most of which have been mentioned elsewhere, but just kicking off the discussion):</p>\r\n<p>&nbsp;</p>\r\n<p>Allow the input of decimal values for restriction percentages (eg., &quot;% Chance to be Missed &lt;= .2&quot;).</p>\r\n<p>Check upon running an Optimize routine to ensure that all currently equipped gear / item enhancements are marked as available to the Optimizer.&nbsp; Potentially give an option to auto-enable of all currently equipped items / gems / enchants.</p>\r\n<p>Run a check upon or nearing completion of any Optimize routine that passes the &quot;all objects marked available&quot; test above against the initial setup, that ensures an Optimize routine will not recommend a less optimal setup than it starts with.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-02T23:18:01.893-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241604",
    "ThreadId": "70885",
    "Html": "<p>I would love to be able to mark specific talents to be mandatory when optimizing talent trees.</p>\r\n<p>&nbsp;</p>\r\n<p>Another feature could be to be able to browse the top 5 builds not only the absolute best.</p>\r\n<p>&nbsp;</p>\r\n<p>/Drizz</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-03T00:59:47.9-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241608",
    "ThreadId": "70885",
    "Html": "<p>Aye, all of the things mentioned so far are things we absolutely want to do. Keep this going!</p>",
    "PostedDate": "2009-10-03T01:44:16.917-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241610",
    "ThreadId": "70885",
    "Html": "<p>Mark certain equipment as a requirement in the build (similar to the talent requirement above)</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-03T02:11:58.883-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241623",
    "ThreadId": "70885",
    "Html": "<p>While certain specific equipment might be a stretch, forcing certain set bonuses would be awesome.&nbsp; While this might seem less worthwhile for DPS, this could be a huge deal for tanks/healers, depending on the relevancy/power of a certain bonus.</p>\r\n<p>Something that seems somewhat related: reworking certain things back-end, where the possibility lends itself, to talent optimization.&nbsp; Example: An Arms Warrior is using an Incite build, picking up all the mandatory Arms and Fury talents, and then putting the rest of the talents in Protection to pick up Incite.&nbsp; However, there's a conundrum that presents itself: Should this player put points into Weapon Mastery at the expense of Incite / Anger Management?&nbsp; My instinct tells me this (talent optimization support) is done on a module-by-module basis, but I really don't have enough information on Talent optimization to know for sure.&nbsp; As-is, the optimizer, from what I've seen, either handles talents extremely poorly, or not at all (and usually tending towards the latter).&nbsp; Getting talent optimization running smoothly and actually being usable would be a huge benefit.&nbsp; The best solution on how to &quot;properly implement&quot; Talent Optimization may even be completely different from what is currently in place, and may even require a new window to input different variables.&nbsp; I'd like Astry's / devs who are intimately familiar with the optimizer's handling of talents to pitch in before I keep rambling.</p>",
    "PostedDate": "2009-10-03T04:13:24.35-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241690",
    "ThreadId": "70885",
    "Html": "<p>One thing that I previously mentioned to Astry via PM was possibly instead of optimizing the Talents, which only a couple of models really support and the rest just FuBar when you try, instead optimize Talent Specs. Basically, take your character and make multiple Set Talent Builds the optimizer can choose from and let it try each one out.</p>\r\n<p>For the Arms Warrior:</p>\r\n<p>1. Arms-All-Exe-Comm&nbsp; :&nbsp; Arms build, includes 5 points in each spec (Mace, Axe, Sword) so that we aren't missing any one of them (the extra 10 talent points are just that, extra), it uses Improved Execute instead of Weapon Mastery, it has Glyph of Commanding vs Glyph of Battle<br>2. Arms-All-Exe-Battle&nbsp; :&nbsp; Arms build, includes 5 points in each spec (Mace, Axe, Sword) so that we aren't missing any one of them (the extra 10 talent points are just that, extra), it uses Improved Execute instead of Weapon Mastery, it has Glyph of Battle vs Glyph of Commanding<br>3. Arms-All-WM-Comm&nbsp; :&nbsp; Arms build, includes 5 points in each spec (Mace, Axe, Sword) so that we aren't missing any one of them (the extra 10 talent points are just that, extra), it uses Weapon Master instead of Improved Execute, it has Glyph of Commanding vs Glyph of Battle<br>4. Arms-All-WM-Battle&nbsp; :&nbsp; Arms build, includes 5 points in each spec (Mace, Axe, Sword) so that we aren't missing any one of them (the extra 10 talent points are just that, extra), it uses Weapon Master instead of Improved Execute, it has Glyph of Battle vs Glyph of Commanding</p>\r\n<p>This way with my ability maintenance settings etc, the optimizer can really determine if I want to use a Weapon Mastery build, to save on Expertise so I can socket ArP or STR, or choose Improved Execute so I can use more rage for Executes in Spamming or in Sudden Death.</p>\r\n<p>Cuz really, who wants to use custom builds when there are plenty of cookie cutters out there that are DESIGNED to maximize your dps but allow only a couple of floater points.</p>",
    "PostedDate": "2009-10-03T11:26:35.797-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241691",
    "ThreadId": "70885",
    "Html": "<p>Any other devs are welcome to correct me if I have it wrong, but when it comes to talents optimisation (and actually all optimisations), the optimiser does it blindly, i.e. it picks random combinations and sees what the final result is. (It uses a genetic algorithm to choose in a structured random way in order to cut down on the number of combinations to choose, but at the fundamental level that doesn't matter to the discussion here).&nbsp;</p>\r\n<p>Thus the optimiser can only evaluate talents based on how it affects the final numbers. The big reason why the optimiser seems to fail on talent optimisation is that many of them are not implemented at all and/or the talents don't affect the measurement numbers. For example, as far as I know, very few if any modules model pushback, since in most PVE raid scenarios only the tank is being hit constantly and modelling pushback for the odd occasion on other players wouldn't be worth the effort. The same goes for fear/stun/disarm resistance mechanisms. Some may argue that those aren't PVE talents but rather PVP talents. But what about talents that increase the range of your spells? It doesn't affect your DPS directly, but in a movement heavy fights or fights that call for staying spread it can make a big difference, by allowing alternative positioning etc. The optimiser would consider it useless and potentially take the questionable PVP talent, if it only affects your DPS in the slightest.&nbsp;</p>\r\n<p>The boss handler feature some of the devs are playing with, might help identifying the value in some talents, by better customising for specific fight scenarios, but even then a whole extra dimension of modelling would be needed before we can start measuring the value of range increase talents.</p>\r\n<p>Thus in my opinion, the current talent optimisation is more dangerous than it is useful. If we allow certain talents to be marked as mandatory and others optional, it might be more useful, although I think there will still be too many optional talents that don't directly add measurable numbers.</p>\r\n<p>&nbsp;</p>\r\n<p>Getting back to other optimiser improvements: As far as I know, when the optimiser suggests a regemming, it still doesn't look for the smallest change (i.e. lowest cost of gems to be swapped out), it just uses whatever random combination came out.&nbsp; Counting this cost in terms of the number of swaps, instead of converting to gold numbers is probably the most practical way. &nbsp;</p>",
    "PostedDate": "2009-10-03T11:33:53.7-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241703",
    "ThreadId": "70885",
    "Html": "<p>Regarding talents the optimizations is done on two levels. At top level the whole talent&nbsp;spec is treated as an item in your gear from genetic&nbsp;algorithm perspective. Imagine it's as if you marked all talent specs in the talent panel drop down as available. On the second level it can mutate those specs by taking one point out and placing it somewhere else, kind of analogous to changing a gem in an item.</p>\r\n<p>The big thing as mentioned to really make it useful is by the models to provide means to add constraints that allow you to specify which talents are needed in order to force some talents that do not have computed value in the model but are useful nontheless. The way I handle this in mage model, but is not ideal, is that I have a form where you can specify a score for each talent and then you can specify an optimization constraint that requires a specific talent score be met. Among other things this allows you to set score to 1 for talents you definitely want and set the constraint to the number of those talents. I've heard other suggestions like marking specific talents as necessary. It usually boils down to constraints of type: if this talent is used then also use the following talents or if this ability is used in the optimal&nbsp;rotations then these talents should be used. I just went for a solution that was easy to implement. If would be nice to hear from someone more experienced with gui design how to easily edit such constraints for end users.</p>",
    "PostedDate": "2009-10-03T12:29:42.357-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241737",
    "ThreadId": "70885",
    "Html": "<p>Possibly the easiest &quot;fix&quot; would be to solely treat the specified talent specs as a single &quot;item&quot;.&nbsp; This would essentially only use the afore-mentioned &quot;top layer&quot; of talent consideration.&nbsp; The user can create custom specs as necessary, moving their 'free' points around to create the diversity in talent specs required.</p>\r\n<p>The pluses here:&nbsp; The Optimizer is never attempting to handle anything other than the user is dictating.&nbsp; Handling talent specs like they are similar to any other object within the program seems like it easy to do from a coding perspective, but feel free to correct me if I am wrong.</p>\r\n<p>The breakdown here would be in any build where a large number of talents would mandate such a high number of permutations so as to render this method extremely difficult in application.&nbsp; For most classes/specs, I don't think that this would present too much of an issue.&nbsp; For example, my Arms Warrior employing an Incite build with permuts covering varying levels of Weapon Mastery would be working with about 3 talent specs, maybe one or two more if I would like to include Anger Management into the program's comparisons.</p>",
    "PostedDate": "2009-10-03T15:34:01.14-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241767",
    "ThreadId": "70885",
    "Html": "<p>Extending that statement further, you could add 20 specs for a class and then mark the most likely X number you want the optimizer to check (without any additional talent changes, just looking at the talent specs as a whole). We already have the Talent Spec Comparison chart, so you can see (with some amount of reasonableness) which ones you would want to choose.</p>\r\n<p>Or maybe we could create a 'Skeleton Spec' assigning an entire 3 trees+glyphs then whatever amount of points are left-over and leaving float points for the optimizer to then select. Eg- leave the Skeleton without WM or Imp Exec and let the opt choose where it wants to put the points. However I think this would be less accurate for those models not set up like the Mage model.</p>",
    "PostedDate": "2009-10-03T18:13:36.563-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241778",
    "ThreadId": "70885",
    "Html": "<p>Well the easiest fix for those models that don't support talent constraints would be to add a check box to optimizer that allows you to disable talent spec mutations.</p>",
    "PostedDate": "2009-10-03T18:39:24.76-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241781",
    "ThreadId": "70885",
    "Html": "<p>To be clear: adding said checkbox would leave it at the top-level talent thing and *not* let it try to change the talent specs provided, which leaves it behaving in the manner I originally described further up the thread?</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-03T18:47:53.27-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241789",
    "ThreadId": "70885",
    "Html": "<p>Correct. That is already what the optimizer does, it's just a matter of disabling mutations.</p>",
    "PostedDate": "2009-10-03T20:06:18.33-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241791",
    "ThreadId": "70885",
    "Html": "<p>Sweet, who can throw that in there for 2.2.20? We can look at more advanced solutions later</p>",
    "PostedDate": "2009-10-03T20:17:19.663-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241798",
    "ThreadId": "70885",
    "Html": "<p>For the decimal places in optimizer requirements, this is a relatively simple add in Rawr2. File FormOptimize.cs View Code, line 419, insert 'numericUpDownRequirementValue.DecimalPlaces = 2;' i checked it and it works on mine. Rawr3 seems to have it already set for this, File OptimizeWindow.xaml line 31 '&lt;Setter Property=&quot;DecimalPlaces&quot; Value=&quot;2&quot;/&gt;'</p>",
    "PostedDate": "2009-10-03T21:02:56.317-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "242155",
    "ThreadId": "70885",
    "Html": "<p>It would be really useful if when starting the optimiser if there was a one-handed weapon that isn't unique available then the optimiser asks if you have one or two of them. Its an FAQ and non-intuitive for casual users to edit the item and make it unique just to prevent the optimiser trying to suggest you use two of them.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-05T06:10:58.613-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "242300",
    "ThreadId": "70885",
    "Html": "<p>Regarding the uniqueness of items and such at some point we should&nbsp;redesign the&nbsp;system to allow specifying how many instances of an item you have in general and to specify availability conditions for each, i.e. gemming/enchant restrictions. There's some work to support this properly in the backend, but this is mostly a ui question.</p>",
    "PostedDate": "2009-10-05T14:16:38.983-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "242321",
    "ThreadId": "70885",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>Levva wrote:</strong><br><p>It would be really useful if when starting the optimiser if there was a one-handed weapon that isn't unique available then the optimiser asks if you have one or two of them. Its an FAQ and non-intuitive for casual users to edit the item and make it unique just to prevent the optimiser trying to suggest you use two of them.</p>\r\n<p>&nbsp;</p></blockquote>\r\nAnd the warrior community cries out, &quot;Nooo! Not just one-handed weapons!&quot;<p></p>",
    "PostedDate": "2009-10-05T15:18:10.433-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "242326",
    "ThreadId": "70885",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>ebs2002 wrote:</strong><br>\r\n<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>Levva wrote:</strong><br>\r\n<p>It would be really useful if when starting the optimiser if there was a one-handed weapon that isn't unique available then the optimiser asks if you have one or two of them. Its an FAQ and non-intuitive for casual users to edit the item and make it unique just to prevent the optimiser trying to suggest you use two of them.</p>\r\n<p>&nbsp;</p>\r\n</blockquote>\r\nAnd the <strong>Fury </strong>warrior community cries out, &quot;Nooo! Not just one-handed weapons!&quot;\r\n<p>&nbsp;</p>\r\n</blockquote>\r\n<p>Fixed it for ya.&nbsp; ;)</p>",
    "PostedDate": "2009-10-05T15:34:49.07-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]