[
  {
    "Id": "246040",
    "ThreadId": "72097",
    "Html": "<p><span style=\"color:#ff0000\">Edit: Fixed simulationcraft times. </span></p>\r\n<p><span style=\"color:#ff0000\">Numbers not changed here, but Rawr.Moonkin has been changed since this post. &nbsp;Rawr DoTs should have a cast time very similar to Wrath in most circumstances.</span></p>\r\n<p>&nbsp;</p>\r\n<p>Computing Moonkin Cast Times</p>\r\n<p>TLDR: &nbsp;Rawr charges a lot of cast time for instants, compared to other tools. &nbsp;Encounter-average Moonkin casting time-costs (cast time+lag) in Rawr, WrathCalcs and SimulationCraft assuming &quot;usual&quot; talents, and a 52.27% Wrath crit rate, at the haste soft-cap (400 haste from gear). &nbsp;I'm <strong>not</strong> saying which tool(s) are &quot;right.&quot; &nbsp;I would like the discussion to explore that issue.</p>\r\n<p>It is possible that I goofed up somewhere. &nbsp;Let me know.</p>\r\n<p>Time-cost of casting a spell in a particular tool:</p>\r\n<p>Rawr:</p>\r\n<ul>\r\n<li>MF,IS=1.3s</li>\r\n<li>Wr=1.12s</li>\r\n<li>SFEclipse=2.0s</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>WrathCalcs</p>\r\n<ul>\r\n<li>Wr,MF,IS=1.22s</li>\r\n<li>SFEclipse=2.1s</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>SimulationCraft</p>\r\n<ul>\r\n<li>Wr: 1.04s</li>\r\n<li>MF: 1.11s</li>\r\n<li>IS: 1.14s</li>\r\n<li>SF: 2.02s</li>\r\n</ul>\r\n<p><br>Since many Moonkin spells have an effective cast time of about 1.0s, a small change in cast time (say 50 ms) can make a 5% change in reported DPS.</p>\r\n<p>A more detailed look:</p>\r\n<ul>\r\n<li>WrathCalcs (WC), an Excel spreadsheet maintained by Arawethion, at EJ. &nbsp;I'm looking at the 090917 version. &nbsp;There is a link to it at the bottom of the first article at http://elitistjerks.com/f47/t66856-moonkin_pve_dps/ .</li>\r\n<li>Rawr, at http://rawr.codeplex.com The Moonkin module &quot;lead&quot; is Dopefish. &nbsp;I'm looking primarily at the code for release 2.2.23, changeset 37550. &nbsp;The files are in the Rawr.Moonkin folder and are SpellRotation.cs, and MoonkinSolver.cs.</li>\r\n<li>Simulationcraft (SC) at http://code.google.com/p/simulationcraft maintained by Nate Heiter (Druid module gets a lot of work by Twigele). &nbsp;I'm looking at revision r3581.</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>==========</p>\r\n<p>WrathCalcs</p>\r\n<p>&nbsp;</p>\r\n<p>WrathCalcs has two user-set &quot;delay&quot; parameters, QueueDelay and InstantDelay. &nbsp;These default to 0.1s and 0.2s, respectively. <span style=\"color:#c0c0c0\">(Edit: Assigned numbers in correct place)</span></p>\r\n<p>Formulas {value at haste softcap, with default spec and delays, Wrath crit at 52.27%}</p>\r\n<ul>\r\n<li>GCD = 1.5/(1+TotalHaste) &nbsp;{1.2}</li>\r\n<li>InstantCast = GCD+InstantDelay {1.4}</li>\r\n<li>NGGCD = Max(GCD/1.2, 1) {1}</li>\r\n<li>InstantCastNG = NGGCD+InstantDelay {1.2}</li>\r\n</ul>\r\n<ul>\r\n<li>WrathCast = Max(1.5/(1+TotalHaste), InstantCast) {1.4}</li>\r\n<li>WNGCast=MAX(1.5/(1+TotalHaste)/1.2+QueueDelay, InstantCastNG) {1.2}</li>\r\n<li>WSpamCast=WNGUptime*WNGCast+(1-WNGUptime*WrathCast) {1.22}</li>\r\n</ul>\r\n<ul>\r\n<li>ISCast=InstantCast*(1-WNGUptime)+InstantCastNG*WNGUptime {1.22}</li>\r\n<li>MFCast=ISCast {1.22}</li>\r\n</ul>\r\n<ul>\r\n<li>SFCast=MAX(3/(1+TotalHaste)+QueueDelay, InstantCast) {2.5}</li>\r\n<li>SFNGCast=MAX(3/(1+TotalHaste)/1.2+QueueDelay, InstantCastNG) {2.1}</li>\r\n<li>SFCastEclipse=(formula similar to WSpamCast) {2.1 at 100% crit}</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>For practical purposes, cast times are</p>\r\n<ul>\r\n<li>Wr,MF,IS=1.22</li>\r\n<li>SF=2.1</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>In WC, DoTs benefit from NG just as much as Wrath. &nbsp;Both have a fairly steep latency penalty. &nbsp;SF has a moderate latency penalty.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>===========</p>\r\n<p>Rawr</p>\r\n<p>&nbsp;</p>\r\n<p>Rawr.Moonkin uses a single latency value (defaults to 0.1s). &nbsp;However, in some circumstances (DoTs at high haste levels) that value is effectively doubled, and SF usually ignores it.</p>\r\n<p>Formulas (simplified, and names changed from code, for clarity)</p>\r\n<p>For Dots, it appears to me that Rawr never uses the NG spellHaste</p>\r\n<ul>\r\n<li>ISCastTime=Max(1.5 / (1 + spellHaste), 1.0f + latency) + latency {1.3}</li>\r\n<li>MFCastTime=ISCastTime {1.3}</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>Nukes use</p>\r\n<ul>\r\n<li>gcd = 1.5f / (1.0f + spellHaste) {1.2}</li>\r\n<li>instantCast = Max(gcd, 1.0f) + latency {1.3}</li>\r\n<li>ngGCD = Max(gcd / 1.2f, 1.0f) {1}</li>\r\n<li>instantCastNG = ngGCD + latency {1.1}</li>\r\n<li>normalCastTime = Max(talented_base / (1 + spellHaste), instantCast); {1.3 for Wrath, 2.4 for SF}</li>\r\n<li>NGCastTime = Max(talented_base / (1 + spellHaste) / (1.2), instantCastNG); {1.1 for Wrath, 2.0 for SF}</li>\r\n<li>CastTime = (1 - NGUptime) * normalCastTime + NGUptime * mainNuke.NGCastTime; {1.12 for Wrath, 2.0 for SF during Eclipse}</li>\r\n</ul>\r\n<p>&nbsp;</p>\r\n<p>For practical purposes, cast times are</p>\r\n<ul>\r\n<li>MF,IS=1.3</li>\r\n<li>Wr=1.12</li>\r\n<li>SF=2.0</li>\r\n</ul>\r\n<p>In Rawr, DoTs get no benefit from NG. &nbsp;DoTs and Wrath have a moderate latency penalty, and SF has no latency penalty. &nbsp;Rawr casts nukes 5-10% faster than WrathCalcs, and casts instants 7% slower than Wrathcalcs.</p>\r\n<p>&nbsp;</p>\r\n<p>==========</p>\r\n<p>SimulationCraft</p>\r\n<p>&nbsp;</p>\r\n<p>SimulationCraft has four parameters for lag:</p>\r\n<ul>\r\n<li>A parameter for queue'd spells. &nbsp;I believe this is used even when the cast time is less than 1.0s. &nbsp;In the sample outputs it is 0.01875s. &nbsp;I'll round that to 0.02s in my numbers below.</li>\r\n<li>Two parameters for GCD spells. &nbsp;One is a penalty for an instant spell. &nbsp;One is a bonus (un-penalty) for casting an instant after a cast time spell. &nbsp;The default penalty is 0.15s. &nbsp;The default bonus is 0.075s. &nbsp;Since most of our spells are not instants, in the numbers below I'll pretend SC uses a fixed penalty of 0.09s.</li>\r\n<li>A parameter for channeled spells. &nbsp;Since SC doesn't handle Hurricane, this doesn't impact Moonkin simulations.</li>\r\n</ul>\r\n<p>The GCD spell testing used as a basis for the two-parameter system was done by a Mage. &nbsp;I strongly suspect it did not involve cases where cast times were less than one second.</p>\r\n<p>&nbsp;</p>\r\n<p>SimulationCraft models NG as it happens. &nbsp;The raw cast times it uses will match the other two tools:</p>\r\n<ul>\r\n<li>MF,IS,Wr = 1.2</li>\r\n<li>MFNG,ISNG,WrNG=1</li>\r\n<li>SF=2.4</li>\r\n<li>SFNG=2</li>\r\n</ul>\r\n<p>and the Spam numbers before lag will be</p>\r\n<ul>\r\n<li>WrSpam=1.02</li>\r\n<li>SFSpamEclipse=2.0</li>\r\n</ul>\r\n<p>How much time do DoTs cost, on average? &nbsp;Consider the cast sequence</p>\r\n<ul>\r\n<li>Wr1 Wr2 Wr3 IS Wr4 Wr5 Wr6</li>\r\n</ul>\r\n<p>I'd say the time cost of IS is the time of that sequence, minus the time of 6*WrSpam. &nbsp;That difference is the cast time of IS, plus the increased cast times of Wr4, Wr5, and Wr6 due to lost NG.</p>\r\n<p>The time of the IS (in SC) will average 1.02 (the same as a Wrath, in WrathSpam). &nbsp;The NG probablity for Wr4, Wr5, and Wr6 will all drop from 89% to 77% (a loss of 12%), and the penalty for losing NG is 0.2s. &nbsp;The before-lag cost for the IS here is</p>\r\n<ul>\r\n<li>1.02+3*12%*.2 = 1.09s.</li>\r\n</ul>\r\n<p>In the EclipseSF case (with 100% SF crit) we see</p>\r\n<ul>\r\n<li>SF SF IS SF SF</li>\r\n</ul>\r\n<p>the IS is a 1s cast, and no SF ever loses NG, so the cost of IS is just 1s. &nbsp;At lower crit rates the penalty can be quite substantial, since a loss of NG is a 0.4s penalty. &nbsp;I'm not doing that math here.</p>\r\n<p>As a rough approximation, assume half of IS occur during wrath spam, and half occur during lunar eclipse, the average cost of IS is about 1.05s.</p>\r\n<p>If we plug MF into SF spam it gets the same result as IS. &nbsp;The cost is 1s. &nbsp;If we plug MF into Wrath spam, we have to consider the possibility of MF crits.</p>\r\n<ul>\r\n<li>Wr1 Wr2 Wr3 MF Wr4 Wr5 Wr6</li>\r\n</ul>\r\n<p>The MF cast itself, will average 1.02s. &nbsp;Using capital letters for crits, the following sequences cause changes in Wr4, Wr5 or Wr6 cast times. &nbsp;I'll use an MF crit rate of 48.27% (no IMF)</p>\r\n<ul>\r\n<li>WR1 wr2 wr3 mf: the mf causes Wr4 to lose NG 6% chance</li>\r\n<li>wr1 wr2 wr3 MF: the MF causes Wr4 to gain NG 5% chance</li>\r\n<li>WR2 wr3 mf wr4: the mf causes Wr5 to lose NG 6% chance</li>\r\n<li>wr2 wr3 MF wr4: the MF causes Wr5 to gain NG 5% chance</li>\r\n<li>Wr3 mf wr4 wr5: the MF causes Wr6 to lose NG 6% chance</li>\r\n</ul>\r\n<p>Note that Wr6 cannot benefit from an MF crit (In SC, with zero lag, it would benefit at &gt;=401 haste, in cases where the MF itself was cast under NG).</p>\r\n<p>On average there is an 8% chance that the sequence will take an extra 0.2s, so the penalty is about 0.02s, and the total MF cast cost is 1.02+.02 = 1.04s. &nbsp;With half of MF during Wrath, and the other half during SF, the average MF cast costs about 1.02s.</p>\r\n<p>SC average cast time costs are approximately (these include lag, numbers above did not):</p>\r\n<ul>\r\n<li>Wr: 1.04s</li>\r\n<li>MF: 1.11s</li>\r\n<li>IS: 1.14s</li>\r\n<li>SF: 2.02s</li>\r\n</ul>\r\n<p>In SC, MF gets 100% benefit from NG, and IS gets about 75% (compared to Wrath) of the NG benefit.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-15T07:00:40.633-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "246083",
    "ThreadId": "72097",
    "Html": "<p>I had changed the cast-time model of nukes to match WC, but I hadn't noticed the cast-time model of DoT's had been changed to match.&nbsp; It'll be in the next version.&nbsp; This would likely explain why the DPS number of Rawr is so much lower than WC, although with the changes in 2.2.23, at least the differences between rotations are lining up.</p>",
    "PostedDate": "2009-10-15T08:19:57.713-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "246304",
    "ThreadId": "72097",
    "Html": "<p>I did some quick tests and I can see a random lag getting applied between &quot;player performs xyz&quot; and &quot;player schedules execute for abc&quot; in the log.....&nbsp; The lag values are pretty darn small in my view, but the hard-core raiders on the dev team get upset when I try to ninja-edit an increase.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-15T17:23:55.463-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "246341",
    "ThreadId": "72097",
    "Html": "<p>Nate,</p>\r\n<p>I don't have svn on my machine right now, but I went to <a href=\"http://code.google.com/p/simulationcraft/source/browse/#svn/trunk/engine\">http://code.google.com/p/simulationcraft/source/browse/#svn/trunk/engine</a>&nbsp;and told it to search the trunk for &quot;queue_lag&quot;. &nbsp;It looked like it was being set in a few places, but the only place it was being used in a calculation was in sc_scaling.cpp (to compute its scale factor).</p>\r\n<p>In the scale factors at the bottom of <a href=\"http://code.google.com/p/simulationcraft/wiki/SampleOutputT9_Details\">http://code.google.com/p/simulationcraft/wiki/SampleOutputT9_Details</a>&nbsp;every single spec has a scale factor of 0.00.</p>",
    "PostedDate": "2009-10-15T19:37:30.593-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "246351",
    "ThreadId": "72097",
    "Html": "<p>I can follow up directly with more details, but just some quick info:&nbsp; The majority of lag handling is found sc_player.cpp player_t::schedule_ready().&nbsp; The scale factors in that report are all zero, because I didn't ask the sim to perform the scale factor calculations for lag, not because lag isn't modeled in regular execution.&nbsp; The scale factors for lag are calculated in a mind-numbingly dumb fashion: Simply at 100ms to the three types of lag values and see what happens.&nbsp; I was anxious to save a bit of runtime, so turn off the lag scale factor calculation by default.&nbsp; I really should remove that from the report if it is not calculated.</p>\r\n<p>One very subtle handling of lag in SimulationCraft that is not very well known: Tigafin did some interesting research to show that a &quot;queued&quot; instant appear to start the GCD a little earlier than expected.&nbsp; There is a measurable difference between Cast-Instant-Cast-Instant-Cast-Instant and Cast-Cast-Cast-Instant-Instant-Instant.&nbsp; That is handled in sc_action.cpp action_t::schedule_execute().</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-15T20:45:00.477-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "246515",
    "ThreadId": "72097",
    "Html": "<p>Ok,</p>\r\n<p>I'll take a closer look at some SC log files, and update my first post here. &nbsp;I'll may have some more questions on how SC is handling timing, but I'll take those to another venue, and stop abusing Astrylan's bandwidth.</p>",
    "PostedDate": "2009-10-16T06:18:11.26-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]