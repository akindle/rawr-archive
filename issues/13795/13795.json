{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "Rawr.ProtPaladin",
      "DisplayName": "Rawr.ProtPaladin"
    },
    "ClosedComment": "I made this update recently",
    "ClosedDate": "2009-08-26T09:19:12.8-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "I have noticed that the ProtPally Avoidance stats are off.\n \nI have tried to find the error in the code but I don't know the language well. I believe the error is being generated by the order of diminishing returns.\n \nI believe diminishing returns are being calculated on each stat one at a time then totaled to provide a percentage. This leads to an increasing error rate.\n \nAs I ran the math out.... (DodgeRating% + Defence Dodge % + Adjility Dodge % ) then apply the diminishing returns to the total. In my build it has made more then a 1% difference in just dodge. (Didn't do perry yet.)",
    "LastUpdatedDate": "2013-05-16T05:24:58.16-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "Rawr",
    "ReportedDate": "2009-08-06T11:59:44.13-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "[ProtPaladin] Avoidance",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 13795
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Diminishing Returns should handled on a per-type-of-avoidance basis.\r\nie, diminish (DodgeFromRating+DodgeFrom%+DodgeFromNonBaseAgility), then (ParryFromRating+ParryFrom%).",
      "PostedDate": "2009-08-06T12:09:14.61-07:00",
      "Id": -2147483648
    },
    {
      "Message": "I think we both said the same thing(at least how i ment to say it). Yours a little more technical. So is it handled that way? or shall I keep digging?",
      "PostedDate": "2009-08-06T12:59:02.34-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Yeah, I thought so, was just clarifying.\r\nI don't know how Rawr.ProtPally does it, offhand.",
      "PostedDate": "2009-08-06T13:01:19.647-07:00",
      "Id": -2147483648
    },
    {
      "Message": "I found the errors I think. Keep in mind I dont use this language and have not programmed in a VERY long time.\r\nCalculationsProtPaladin.cs at the bottom.\r\n\r\nAt the bottom of the file the rating conversions are off...\r\n\"public static readonly float AgilityToDodge = 1.0f / 52.08333333f / 100.0f; \" should be \"public static readonly float AgilityToDodge = 1.0f / 59.895832/ 100.0f;\"\r\n\r\nThis is the only one I can seem to correct. Im getting lost with the math used on the other ratings but I am thinking the diminishing returns are not being applied properly.\r\n\r\n\r\n\r\n",
      "PostedDate": "2009-08-06T18:56:30.177-07:00",
      "Id": -2147483648
    },
    {
      "Message": "It shouldn't have that at all, actually, since there are shared methods for stat conversion in the StatConversion class now. Can someone update Rawr.ProtPaladin to use StatConversion?",
      "PostedDate": "2009-08-06T23:13:54.517-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-08-26T09:19:12.8-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-09-05T16:39:54.247-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2010-09-05T16:47:50.953-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T18:33:48.01-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T05:24:58.16-07:00",
      "Id": -2147483648
    }
  ]
}