--- Rawr.RestoSham/CalculationsRestoSham.cs 2009-12-15 18:24:55.000000000 -0800
+++ Rawr.RestoSham/CalculationsRestoSham.cs 2009-12-15 18:10:16.968914788 -0800
@@ -503,38 +503,6 @@
                 stats.SpellHaste += stats.RestoSham2T10 * (.2f / 6f);
             if (RTPerSec > 0)
                 stats.SpellPower += stats.RestoShamRelicT10;
-
-            #region Proc Handling for Mana Restore only
-            Stats statsProcs2 = new Stats();
-            foreach (SpecialEffect effect in stats.SpecialEffects())
-            {
-                switch (effect.Trigger)
-                {
-                    case (Trigger.HealingSpellCast):
-                        effect.AccumulateAverageStats(statsProcs2, (1f / HealPerSec), effect.Chance, 0f, FightSeconds);
-                        break;
-                    case (Trigger.HealingSpellCrit):
-                        effect.AccumulateAverageStats(statsProcs2, (1f / CritPerSec), effect.Chance, 0f, FightSeconds);
-                        break;
-                    case (Trigger.SpellCast):
-                        effect.AccumulateAverageStats(statsProcs2, (1f / HealPerSec), effect.Chance, 0f, FightSeconds);
-                        break;
-                    case (Trigger.SpellCrit):
-                        effect.AccumulateAverageStats(statsProcs2, (1f / CritPerSec), effect.Chance, 0f, FightSeconds);
-                        break;
-                    case (Trigger.SpellHit):
-                        effect.AccumulateAverageStats(statsProcs2, (1f / HealPerSec), effect.Chance, 0f, FightSeconds);
-                        break;
-                    case Trigger.Use:
-                        effect.AccumulateAverageStats(statsProcs2, effect.Cooldown, 1f, 0f, FightSeconds);
-                        break;
-                }
-            }
-            /*stats.ManaRestore += (stats.ManaRestoreOnCrit_25_45 / (0.5f / (CritsPerSec * .25f) + 45) * FightSeconds); // Mana per Crit, to be removed when Special effects are implimented
-            stats.ManaRestore += (stats.ManaRestoreOnCast_5_15 / (0.5f / (HealsPerSec * .05f) + 15) * FightSeconds); // Mana per Cast, to be removed when Special effects are implimented
-            stats.ManaRestore += (stats.ManaRestoreOnCast_10_45 / (0.5f / (HealsPerSec * .1f) + 45) * FightSeconds); // Mana per Cast, to be removed when Special effects are implimented
-            */
-            #endregion
             #endregion
             #region Calculate Sequence HPS/MPS
             calcStats.HSTHeals = (((stats.SpellPower * .044f) + 25) * (1f + (character.ShamanTalents.RestorativeTotems * .15f)) * (1f + (character.ShamanTalents.GlyphofHealingStreamTotem ? .2f : 0))) / 2;
@@ -596,7 +564,6 @@
                 + ((((((float)Math.Floor(options.FightLength / 5.025f) + 1) * ((calcStats.BasicStats.Mana * (1 + calcStats.BasicStats.BonusManaMultiplier)) * (.24f + ((character.ShamanTalents.GlyphofManaTideTotem ? 0.4f : 0)))))) * (options.ManaTideEveryCD ? 1 : 0)) / FightSeconds)
                 + ((calcStats.BasicStats.ManaRestoreFromMaxManaPerSecond * calcStats.BasicStats.Mana) * (options.BurstPercentage * .01f))
                 + (calcStats.BasicStats.Mp5 / 5)
-                + statsProcs2.ManaRestore
                 + ((RTCPerSec * (Orb * (character.ShamanTalents.ImprovedWaterShield / 3)))
                 + (LHWCPerSec * (Orb * (character.ShamanTalents.ImprovedWaterShield / 3)) * .6f)
                 + (HWCPerSec * (Orb * (character.ShamanTalents.ImprovedWaterShield / 3)))
@@ -610,7 +577,6 @@
                 + ((((((float)Math.Floor(options.FightLength / 5.025f) + 1) * ((calcStats.BasicStats.Mana * (1 + calcStats.BasicStats.BonusManaMultiplier)) * (.24f + ((character.ShamanTalents.GlyphofManaTideTotem ? 0.4f : 0)))))) * (options.ManaTideEveryCD ? 1 : 0)) / FightSeconds) 
                 + ((calcStats.BasicStats.ManaRestoreFromMaxManaPerSecond * calcStats.BasicStats.Mana) * (options.BurstPercentage * .01f))
                 + (calcStats.BasicStats.Mp5 / 5) 
-                + statsProcs2.ManaRestore 
                 + ((RTCPerSec * (Orb * (character.ShamanTalents.ImprovedWaterShield / 3))) 
                 + (LHWCPerSec * (Orb * (character.ShamanTalents.ImprovedWaterShield / 3)) * .6f) 
                 + (HWCPerSec  * (Orb * (character.ShamanTalents.ImprovedWaterShield / 3))) 
@@ -684,23 +650,17 @@
             {
                 switch (effect.Trigger)
                 {
-                    case (Trigger.HealingSpellCast):
-                        effect.AccumulateAverageStats(statsProcs, (1f / HealPerSec), effect.Chance, 0f, FightSeconds);
-                        break;
-                    case (Trigger.HealingSpellCrit):
-                        effect.AccumulateAverageStats(statsProcs, (1f / CritPerSec), effect.Chance, 0f, FightSeconds);
-                        break;
                     case (Trigger.SpellCast):
+                    case (Trigger.SpellHit):
+                    case (Trigger.HealingSpellCast):
                         effect.AccumulateAverageStats(statsProcs, (1f / HealPerSec), effect.Chance, 0f, FightSeconds);
                         break;
                     case (Trigger.SpellCrit):
+                    case (Trigger.HealingSpellCrit):
                         effect.AccumulateAverageStats(statsProcs, (1f / CritPerSec), effect.Chance, 0f, FightSeconds);
                         break;
-                    case (Trigger.SpellHit):
-                        effect.AccumulateAverageStats(statsProcs, (1f / HealPerSec), effect.Chance, 0f, FightSeconds);
-                        break;
-                    case Trigger.Use:
-                        effect.AccumulateAverageStats(statsProcs, effect.Cooldown, 1f, 0f, effect.Duration);
+                    case (Trigger.Use):
+                        effect.AccumulateAverageStats(statsProcs, effect.Cooldown, effect.Chance, 0f, FightSeconds);
                         break;
                 }
             }
