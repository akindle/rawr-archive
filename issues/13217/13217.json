{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Several months old with no responses, if this is still an issue please resubmit",
    "ClosedDate": "2009-08-19T13:29:25.497-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Just another thing I found while working on unittests and adding in better Sigil parsing.\n \nin: \npublic static bool operator ==(Stats x, Stats y)\n{\n...\n            if (x._rawSpecialEffectDataSize > 0 || y._rawSpecialEffectDataSize > 0) return false;\n...\n}\n \nMeans that if anything has a special effect on it, it's going to eject.  No comparison done for what the special effects may be.",
    "LastUpdatedDate": "2013-05-16T05:25:36.113-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "Rawr",
    "ReportedDate": "2009-05-12T07:43:25.78-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Stats operator == doesn't allow for special effects.",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 13217
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Nice... This one actually is being used, so we should fix this.",
      "PostedDate": "2009-05-12T09:32:22.06-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Right now in the unittest code:\r\n\r\n        public void ProcessEquipLineTest()\r\n        {\r\n            for(int m_i = 0; m_i < 13; m_i++)\r\n            {\r\n                string line = m_TestLineArray[m_i];\r\n                Stats stats = new Stats();\r\n                bool isArmory = false;\r\n                SpecialEffects.ProcessEquipLine(line, stats, isArmory);\r\n                string szExpected = m_ExpectedArray[m_i].ToString();\r\n                string szStats = stats.ToString();\r\n                Assert.AreEqual(szExpected, szStats, line);\r\n            }\r\n        }\r\n\r\nAs you can see, I'm just comparing equality using the tostring() output.  It's not great for GT or LT operations but it works well enough for equalities.  That should get you through for this one operator.  Not sure the best option for GT/LT yet.  Haven't gotten there.",
      "PostedDate": "2009-05-12T20:41:12.087-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Where is this operator used? The only place I know of that comparisons on stats are done is for optimization filtering. For that purpose items with special effects should be treated as not equal. No need to lose performance for trying to fix something that is never used. If there is a problem with how things are just give it a different name.",
      "PostedDate": "2009-05-13T01:54:52.72-07:00",
      "Id": -2147483648
    },
    {
      "Message": "\"If there is a problem with how things are just give it a different name.\"\r\n\r\nThis is again where I have to disagree.  I understand and hear the performance concerns, there are ways to mitigate those concerns by setting up cheap gates before doing heavy lifting.  However, operators and functions should not be present in the code if they are not expected to get used. Where is it getting used?  How are these things being found?  Because I look at a bit of code and write a unittest to ensure that things are working as expected.  The more exceptions that exist, especially for operators, the buggier the underlying design will be.  Those design level bugs where we as the Dev/QA team would want to go back to those design specs and re-evaluate the goals of that feature/module/etc.  At this point, this is just an implementation bug and it can be corrected.   I can work a the fix for evaluation if you like.",
      "PostedDate": "2009-05-13T09:53:11.08-07:00",
      "Id": -2147483648
    },
    {
      "Message": "It's hard to find where operators are used, because VS's Find All References doesn't find them. I just put a breakpoint there (make sure that 'step over properties and operators' isn't checked in VS debugging options) and run it. It's used at least in the xml serialization code.",
      "PostedDate": "2009-05-13T10:20:47.043-07:00",
      "Id": -2147483648
    },
    {
      "Message": "I agree that operators should behave as expected. All I'm saying is that optimization filtering in that case should not use operators, but a custom version that ignores special effects.",
      "PostedDate": "2009-05-13T12:00:32.727-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-08-19T13:29:25.497-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T18:34:33.027-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T05:25:36.113-07:00",
      "Id": -2147483648
    }
  ]
}