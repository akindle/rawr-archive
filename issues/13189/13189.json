{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2009-05-08T13:58:14.847-07:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Rawr.Stats.AllCompare final evaluation in :\n            return ArrayUtils.AllCompare(x._rawAdditiveData, y._rawAdditiveData, comparison)\n                && ArrayUtils.AllCompare(x._rawMultiplicativeData, y._rawMultiplicativeData, comparison)\n                && ArrayUtils.AllCompare(x._rawInverseMultiplicativeData, y._rawInverseMultiplicativeData, comparison)\n                && ArrayUtils.AllCompare(x._rawNoStackData, y._rawNoStackData, comparison);\n \nwill return false even when the evaluation should be true:\nSee the following unittest code:\n            // Different Stat, equal value.\n            Stats x = new Stats();\n            x.Strength = 10f;\n            Stats y = new Stats();\n            y.Agility = 15f;\n            bool expected = true;\n            bool actual;\n            // 10 str > 15 str == false\n            actual = (x > y);\n            Assert.AreEqual(expected, actual);\n            expected = true;\n            // 15 str > 10 str == true\n            actual = (y > x);  // This call is returning false and thusly the bug.\n            Assert.AreEqual(expected, actual);\n \nMy guess is that since we're &&ing everything, it's going to be false if ANY of the values are false.  And since you could have some miss-match values in one area and not in another I don't see a simple fix quite yet.  So hence, I'm writing it up and if someone has a fix, they or I can implement it.\n \nLet me know if you need more info.  Or if you want me to check in my incomplete unittest project.",
    "LastUpdatedDate": "2013-05-16T05:25:38.577-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "Rawr",
    "ReportedDate": "2009-05-07T18:16:22.383-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Rawr.Stats Class: GreaterThan and LessThan operator functions fail unittests.",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 13189
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Crappola... copied wrong unittest: \r\n\r\n            // Same Stat, equal value.\r\n            Stats x = new Stats();\r\n            x.Strength = 15f;\r\n            Stats y = new Stats();\r\n            y.Strength = 15f;\r\n            bool expected = false;\r\n            bool actual;\r\n            // 15 > 15 == false\r\n            actual = (x > y);\r\n            Assert.AreEqual(expected, actual);\r\n            // 15 > 15 == false\r\n            actual = (y > x);\r\n            Assert.AreEqual(expected, actual);\r\n            // Same Stat, inequal value.\r\n            // 10 > 15 == false\r\n            actual = (x > y);\r\n            Assert.AreEqual(expected, actual);\r\n            expected = true;\r\n            x.Strength = 10f;\r\n            // 15 > 10 == true\r\n            actual = (y > x);  // This is the call that's returning false.\r\n            Assert.AreEqual(expected, actual);",
      "PostedDate": "2009-05-07T18:21:03.797-07:00",
      "Id": -2147483648
    },
    {
      "Message": "The implemented meaning of > operator is that all stats are greater while you would probably expect it to mean at least one is greater while others are not smaller.\r\n\r\nThis is probably a bug, but this code is never used.",
      "PostedDate": "2009-05-07T18:59:08.097-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Yeah, I confirmed, the > and < operators are not used anywhere. I'll update them to '1+ greater, none lesser'.",
      "PostedDate": "2009-05-07T19:51:13.757-07:00",
      "Id": -2147483648
    },
    {
      "Message": "I agree... that's why in my different stat unittest, I expect it to be false.\r\nBut when comparing a stat of 15 STR vs. 10 STR and all values of 0 or being the same, then we should be able to account for that comparison.  \r\n\r\nAnd if the code is never used, then arguably it shouldn't be there.  ;)",
      "PostedDate": "2009-05-07T19:54:14.59-07:00",
      "Id": -2147483648
    },
    {
      "Message": "Checked in. Implemented it as 'x <= y && x != y' (and similar for >).",
      "PostedDate": "2009-05-07T19:57:13.287-07:00",
      "Id": -2147483648
    },
    {
      "Message": "verified rev. 33790",
      "PostedDate": "2009-05-07T20:15:16.283-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-05-08T13:58:14.847-07:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T18:34:35.867-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T05:25:38.577-07:00",
      "Id": -2147483648
    }
  ]
}